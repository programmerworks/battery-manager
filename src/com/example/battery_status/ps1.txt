package com.example.battery_status;

import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioManager;
import android.os.BatteryManager;
import android.os.IBinder;
import android.os.Message;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.widget.Toast;
import android.app.Notification;

import android.os.Handler;
import java.util.logging.LogRecord;

/**
 * Created with IntelliJ IDEA.
 * User: mraviteja
 * Date: 8/6/14
 * Time: 12:49 PM
 * To change this template use File | Settings | File Templates.
 */
public class PowerService extends Service{

    public PendingIntent contentIntent ;
    public  Notification notification;
    PowerService ps;
    @Override
    public IBinder onBind(Intent intent) {
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }


    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {

        Toast.makeText(this,"task perform in service",300).show();
        ThreadDemo td=new ThreadDemo();
        td.start();
        Notification notification = new Notification(R.drawable.ic_launcher,
                "Rolling text on statusbar", System.currentTimeMillis());

        PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
                new Intent(this, MyActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);

        notification.setLatestEventInfo(this,
                "Notification title", "Notification description", contentIntent);

        startForeground(1, notification);

        return super.onStartCommand(intent, flags, startId);
    }


    @Override
    public void onCreate() {
        registerReceiver(this.mBatInfoReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
    }

    @Override
    public void onStart(final Intent intent, int startid) {
        notification = new Notification(R.drawable.ic_launcher,
                "Rolling text on statusbar", System.currentTimeMillis());

        contentIntent = PendingIntent.getActivity(this, 0,
                new Intent(this, MyActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);
          ps = this;
        notification.setLatestEventInfo(this,
                "Battery Manager", "Battery charging is.", contentIntent);

        startForeground(1, notification);




    }

    private Handler handler=new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            showAppNotification();
        }
    };


    private class ThreadDemo extends Thread{
        @Override
        public void run() {
            super.run();
            try{
                sleep(1*1000);
                handler.sendEmptyMessage(0);
            }catch(Exception e){
                e.getMessage();
            }
        }
    }


    void showAppNotification() {
        try{
            NotificationManager nm = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
            // The PendingIntent to launch our activity if the user selects this
            // notification.  Note the use of FLAG_CANCEL_CURRENT so that, if there
            // is already an active matching pending intent, cancel it and replace
            // it with the new array of Intents.
//      PendingIntent contentIntent = PendingIntent.getActivities(this, 0,
//             "My service completed", PendingIntent.FLAG_CANCEL_CURRENT);

            // The ticker text, this uses a formatted string so our message could be localized
            String tickerText ="djdjsdjkd";

            // construct the Notification object.
            Notification notif = new Notification(R.drawable.ic_launcher, tickerText,
                    System.currentTimeMillis());

            // Set the info for the views that show in the notification panel.
//      notif.setLatestEventInfo(this, from, message, contentIntent);

            // We'll have this notification do the default sound, vibration, and led.
            // Note that if you want any of these behaviors, you should always have
            // a preference for the user to turn them off.
            notif.defaults = Notification.DEFAULT_ALL;

            // Note that we use R.layout.incoming_message_panel as the ID for
            // the notification.  It could be any integer you want, but we use
            // the convention of using a resource id for a string related to
            // the notification.  It will always be a unique number within your
            // application.
            nm.notify(0, notif);
        }catch(Exception e){
            e.getMessage();
        }
    }

    @Override
    public void onDestroy() {
        unregisterReceiver(this.mBatInfoReceiver);

    }


    private final BroadcastReceiver mBatInfoReceiver = new BroadcastReceiver(){
        @Override
        public void onReceive(Context arg0, Intent intent) {

            /*int level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
            int scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);

            float batteryPct = level / (float)scale;*/

            int currentLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
            int scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
            int level = -1;
            if (currentLevel >= 0 && scale > 0) {
                level = (currentLevel * 100) / scale;
            }


            Toast.makeText(arg0,"Battery Broadcast"+level,Toast.LENGTH_SHORT).show();
        }
    };
}
